/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protobuf

package org.apache.drill.exec.proto;


public final class SchemaExecProtos
{

    public static final class FragmentHandle
    {
        public static final org.apache.drill.exec.proto.SchemaExecProtos.FragmentHandle.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaExecProtos.FragmentHandle.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaExecProtos.FragmentHandle.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaExecProtos.FragmentHandle.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.ExecProtos.FragmentHandle>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.ExecProtos.FragmentHandle message) throws java.io.IOException
            {
                if(message.hasQueryId())
                    output.writeObject(1, message.getQueryId(), org.apache.drill.exec.proto.SchemaUserBitShared.QueryId.WRITE, false);

                if(message.hasMajorFragmentId())
                    output.writeInt32(2, message.getMajorFragmentId(), false);
                if(message.hasMinorFragmentId())
                    output.writeInt32(3, message.getMinorFragmentId(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.ExecProtos.FragmentHandle message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaExecProtos.FragmentHandle.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaExecProtos.FragmentHandle.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.ExecProtos.FragmentHandle> typeClass()
            {
                return org.apache.drill.exec.proto.ExecProtos.FragmentHandle.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.ExecProtos.FragmentHandle.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.ExecProtos.FragmentHandle.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.ExecProtos.FragmentHandle message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.ExecProtos.FragmentHandle newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.ExecProtos.FragmentHandle.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.ExecProtos.FragmentHandle.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setQueryId(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.QueryId.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.QueryId.MERGE));

                            break;
                        case 2:
                            builder.setMajorFragmentId(input.readInt32());
                            break;
                        case 3:
                            builder.setMinorFragmentId(input.readInt32());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.ExecProtos.FragmentHandle.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.ExecProtos.FragmentHandle.Builder newMessage()
            {
                return org.apache.drill.exec.proto.ExecProtos.FragmentHandle.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaExecProtos.FragmentHandle.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaExecProtos.FragmentHandle.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.ExecProtos.FragmentHandle.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.ExecProtos.FragmentHandle.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.ExecProtos.FragmentHandle.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.ExecProtos.FragmentHandle.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.ExecProtos.FragmentHandle.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "queryId";
                case 2: return "majorFragmentId";
                case 3: return "minorFragmentId";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("queryId", 1);
            fieldMap.put("majorFragmentId", 2);
            fieldMap.put("minorFragmentId", 3);
        }
    }

    public static final class PlanFragment
    {
        public static final org.apache.drill.exec.proto.SchemaExecProtos.PlanFragment.MessageSchema WRITE =
            new org.apache.drill.exec.proto.SchemaExecProtos.PlanFragment.MessageSchema();
        public static final org.apache.drill.exec.proto.SchemaExecProtos.PlanFragment.BuilderSchema MERGE =
            new org.apache.drill.exec.proto.SchemaExecProtos.PlanFragment.BuilderSchema();
        
        public static class MessageSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.ExecProtos.PlanFragment>
        {
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.ExecProtos.PlanFragment message) throws java.io.IOException
            {
                if(message.hasHandle())
                    output.writeObject(1, message.getHandle(), org.apache.drill.exec.proto.SchemaExecProtos.FragmentHandle.WRITE, false);

                if(message.hasNetworkCost())
                    output.writeFloat(4, message.getNetworkCost(), false);
                if(message.hasCpuCost())
                    output.writeFloat(5, message.getCpuCost(), false);
                if(message.hasDiskCost())
                    output.writeFloat(6, message.getDiskCost(), false);
                if(message.hasMemoryCost())
                    output.writeFloat(7, message.getMemoryCost(), false);
                if(message.hasFragmentJson())
                    output.writeString(8, message.getFragmentJson(), false);
                if(message.hasLeafFragment())
                    output.writeBool(9, message.getLeafFragment(), false);
                if(message.hasAssignment())
                    output.writeObject(10, message.getAssignment(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.WRITE, false);

                if(message.hasForeman())
                    output.writeObject(11, message.getForeman(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.WRITE, false);

                if(message.hasMemInitial())
                    output.writeInt64(12, message.getMemInitial(), false);
                if(message.hasMemMax())
                    output.writeInt64(13, message.getMemMax(), false);
                if(message.hasQueryStartTime())
                    output.writeInt64(14, message.getQueryStartTime(), false);
                if(message.hasCredentials())
                    output.writeObject(15, message.getCredentials(), org.apache.drill.exec.proto.SchemaUserBitShared.UserCredentials.WRITE, false);

                if(message.hasTimeZone())
                    output.writeInt32(16, message.getTimeZone(), false);
                if(message.hasOptionsJson())
                    output.writeString(17, message.getOptionsJson(), false);
            }
            public boolean isInitialized(org.apache.drill.exec.proto.ExecProtos.PlanFragment message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaExecProtos.PlanFragment.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaExecProtos.PlanFragment.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.ExecProtos.PlanFragment> typeClass()
            {
                return org.apache.drill.exec.proto.ExecProtos.PlanFragment.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.ExecProtos.PlanFragment.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.ExecProtos.PlanFragment.class.getName();
            }
            //unused
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.ExecProtos.PlanFragment message) throws java.io.IOException {}
            public org.apache.drill.exec.proto.ExecProtos.PlanFragment newMessage() { return null; }
        }
        public static class BuilderSchema implements com.dyuproject.protostuff.Schema<org.apache.drill.exec.proto.ExecProtos.PlanFragment.Builder>
        {
            public void mergeFrom(com.dyuproject.protostuff.Input input, org.apache.drill.exec.proto.ExecProtos.PlanFragment.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setHandle(input.mergeObject(org.apache.drill.exec.proto.ExecProtos.FragmentHandle.newBuilder(), org.apache.drill.exec.proto.SchemaExecProtos.FragmentHandle.MERGE));

                            break;
                        case 4:
                            builder.setNetworkCost(input.readFloat());
                            break;
                        case 5:
                            builder.setCpuCost(input.readFloat());
                            break;
                        case 6:
                            builder.setDiskCost(input.readFloat());
                            break;
                        case 7:
                            builder.setMemoryCost(input.readFloat());
                            break;
                        case 8:
                            builder.setFragmentJson(input.readString());
                            break;
                        case 9:
                            builder.setLeafFragment(input.readBool());
                            break;
                        case 10:
                            builder.setAssignment(input.mergeObject(org.apache.drill.exec.proto.CoordinationProtos.DrillbitEndpoint.newBuilder(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.MERGE));

                            break;
                        case 11:
                            builder.setForeman(input.mergeObject(org.apache.drill.exec.proto.CoordinationProtos.DrillbitEndpoint.newBuilder(), org.apache.drill.exec.proto.SchemaCoordinationProtos.DrillbitEndpoint.MERGE));

                            break;
                        case 12:
                            builder.setMemInitial(input.readInt64());
                            break;
                        case 13:
                            builder.setMemMax(input.readInt64());
                            break;
                        case 14:
                            builder.setQueryStartTime(input.readInt64());
                            break;
                        case 15:
                            builder.setCredentials(input.mergeObject(org.apache.drill.exec.proto.UserBitShared.UserCredentials.newBuilder(), org.apache.drill.exec.proto.SchemaUserBitShared.UserCredentials.MERGE));

                            break;
                        case 16:
                            builder.setTimeZone(input.readInt32());
                            break;
                        case 17:
                            builder.setOptionsJson(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.apache.drill.exec.proto.ExecProtos.PlanFragment.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.apache.drill.exec.proto.ExecProtos.PlanFragment.Builder newMessage()
            {
                return org.apache.drill.exec.proto.ExecProtos.PlanFragment.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.apache.drill.exec.proto.SchemaExecProtos.PlanFragment.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.apache.drill.exec.proto.SchemaExecProtos.PlanFragment.getFieldNumber(name);
            }
            public java.lang.Class<org.apache.drill.exec.proto.ExecProtos.PlanFragment.Builder> typeClass()
            {
                return org.apache.drill.exec.proto.ExecProtos.PlanFragment.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.apache.drill.exec.proto.ExecProtos.PlanFragment.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.apache.drill.exec.proto.ExecProtos.PlanFragment.class.getName();
            }
            //unused
            public void writeTo(com.dyuproject.protostuff.Output output, org.apache.drill.exec.proto.ExecProtos.PlanFragment.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "handle";
                case 4: return "networkCost";
                case 5: return "cpuCost";
                case 6: return "diskCost";
                case 7: return "memoryCost";
                case 8: return "fragmentJson";
                case 9: return "leafFragment";
                case 10: return "assignment";
                case 11: return "foreman";
                case 12: return "memInitial";
                case 13: return "memMax";
                case 14: return "queryStartTime";
                case 15: return "credentials";
                case 16: return "timeZone";
                case 17: return "optionsJson";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("handle", 1);
            fieldMap.put("networkCost", 4);
            fieldMap.put("cpuCost", 5);
            fieldMap.put("diskCost", 6);
            fieldMap.put("memoryCost", 7);
            fieldMap.put("fragmentJson", 8);
            fieldMap.put("leafFragment", 9);
            fieldMap.put("assignment", 10);
            fieldMap.put("foreman", 11);
            fieldMap.put("memInitial", 12);
            fieldMap.put("memMax", 13);
            fieldMap.put("queryStartTime", 14);
            fieldMap.put("credentials", 15);
            fieldMap.put("timeZone", 16);
            fieldMap.put("optionsJson", 17);
        }
    }

}
